#!/usr/bin/python3
# -*- coding:utf-8 -*-

"""
    Automatic versioning script.
    
    This script is used to automatically generate version information for the project.
    
    Which includes:
    - Major version number
    - Compile time
    - Git commit id
    - Compile iteration number
    
    Author:                     Simakeng (simakeng@outlook.com)
    Date:                       2023-10-17
    Version(of this script):    0.0.3
"""

import os.path as path
import argparse
import json
import time
import sys
import os

parser = argparse.ArgumentParser(
    prog='auto_version.py',
    description='Automatic versioning script.')


parser.add_argument('-o', '--output', dest='output',
                    default='version.h', help='Output file name.', required=True)
parser.add_argument('-v', '--version', dest='version',
                    default='0.0.0', help='Version number.')
parser.add_argument('-a', '--append', dest='append',
                    default='', help='Append string.')

parser.add_argument('-n','--macro-name', dest='macro_name',help='Macro name.', default='APP_VERSION')

args = parser.parse_args()

# check if this is a valid git repo
git_repo = os.popen('git rev-parse --is-inside-work-tree').read().strip()
if(git_repo != 'true'):
    print("this is not a valid working tree.",file=sys.stderr)
    sys.exit(1)

# check current branch
git_branch = os.popen('git rev-parse --abbrev-ref HEAD').read().strip()
if(git_branch == 'HEAD'):
    git_branch = "detached-HEAD"

has_remote = True

# check if current branch is tracked to a remote
git_remote = os.popen('git rev-parse --abbrev-ref --symbolic-full-name @{u}').read().strip()
if (len(git_remote) == 0):
    print("this is a local branch, no remote tracking.")
    git_remote = "local_repo"
    has_remote = False

git_remote_url = ''
git_remote_branch = ''
if has_remote:
    git_remote_url = os.popen(f'git config --get remote.{git_remote}.url').read().strip()
    git_remote_branch = os.popen(f'git config --get remote.{git_remote}.push').read().strip()

# check git commit id
git_commit_id = os.popen('git rev-parse HEAD').read().strip()[:14]

# check if there is uncommited file
git_status = os.popen('git status --porcelain').read().strip()
if(len(git_status) != 0):
    # there is uncommited file
    git_status = "-dirty"

git_commit_id = git_commit_id + git_status

# get last commit author, date and message
git_commit_author = os.popen('git log -1 --pretty=format:"%an"').read().strip()
git_commit_date = os.popen('git log -1 --pretty=format:"%ad"').read().strip()
git_commit_message = os.popen('git log -1 --pretty=format:"%f"').read().strip()

# get build time
build_time = time.strftime("%Y-%m-%dT%H:%M:%S%z", time.localtime())

# prepare output file
target_file = path.abspath(args.output)
target_dir = path.dirname(target_file)
os.makedirs(target_dir, exist_ok=True)

iter_cache = path.join(target_dir,"auto-version")

compile_type = "full"

# check the compile iteration number
iter_num = 0
if(path.exists(iter_cache)):
    with open(iter_cache,'r',encoding='utf-8') as f:
        iter_num, old_git_commit_id,old_version_id = json.loads(f.read())
        if(old_git_commit_id != git_commit_id or old_version_id != args.version):
            iter_num = 0
            print("version changed, reset iteration number to 0")
        else:
            print("version not changed, increase iteration number to {}".format(iter_num + 1))
            iter_num += 1
            compile_type = "inc" + str(iter_num)
else:
    print("no cache file found, reset iteration number to 0")
    
with open(iter_cache,'w',encoding='utf-8') as f:
    f.write(json.dumps((iter_num,git_commit_id,args.version)))

# build the version string
version_string = f"{args.version}-{git_commit_id}-{compile_type}-{build_time}"

macro_name = args.macro_name


with open(target_file,'w',encoding='utf-8') as f:
    f.write(f"""/**
 * this file is automatically generated by {path.basename(__file__)}
 * do not modify it manually
 */
 
#pragma once

#ifndef {macro_name}_STRING

#define {macro_name}_STRING "{version_string}"
#define {macro_name}_BUILD_ID "build {iter_num}"
#define {macro_name}_VERSION "{args.version}"
#define {macro_name}_GIT_COMMIT_ID "{git_commit_id}"
#define {macro_name}_BUILD_TIME "{build_time}"
#define {macro_name}_GIT_BRANCH "{git_branch}"
#define {macro_name}_GIT_REMOTE "{git_remote}"
#define {macro_name}_GIT_REMOTE_BRANCH "{git_remote_branch}"
#define {macro_name}_GIT_REMOTE_URL "{git_remote_url}"
#define {macro_name}_GIT_COMMIT_AUTHOR "{git_commit_author}"
#define {macro_name}_GIT_COMMIT_DATE "{git_commit_date}"
#define {macro_name}_GIT_COMMIT_MESSAGE "{git_commit_message}"

#endif //! {macro_name}_STRING
""")
